generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String   @id @default(cuid())
  joinedAt   DateTime @default(now())
  modifiedAt DateTime @default(now()) @updatedAt

  email         String  @unique
  username      String
  photoUrl      String?
  verified      Boolean @default(false)
  firstName     String
  lastName      String
  contactNumber String?
  password      String?
  randomOTP     String?

  // 1: admin
  // 2: staff
  // 3: customer
  role Int @default(3)

  // 1: active
  // 2: inactive
  // 3: banned
  // 4: deleted
  status Int @default(1)

  Boxes        Box[]
  BoxOrders    BoxOrder[]
  Transactions Transaction[]
  AuditLogs    AuditLog[]
  Bookings     Booking[]
}

model Box {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  modifiedAt DateTime @updatedAt

  name   String
  status Int    @default(1)

  // diemnsions
  totalWidth     Float
  height         Float
  leftPanelSize  Float
  rightPanelSize Float

  dragTransform String
  quality       String

  // 1: single
  // 2: double
  thickness Int @default(1)

  // 1: master
  // 2: inner
  placement Int @default(1)

  // markings
  markings      BoxMarking[]
  imageMarkings ImageMarking[]

  // owner
  owner   User   @relation(fields: [ownerId], references: [id])
  ownerId String

  orders BoxOrder[]

  @@index([ownerId])
}

model ImageMarking {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  modifiedAt DateTime @updatedAt

  width     Float
  height    Float
  src       String
  transform String

  Box   Box?    @relation(fields: [boxId], references: [id])
  boxId String?
}

model BoxMarking {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  modifiedAt DateTime @updatedAt

  cssTransform String
  label        String
  value        String
  isUnderlined Boolean @default(false)

  Box   Box?    @relation(fields: [boxId], references: [id])
  boxId String?
}

model BoxOrder {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  modifiedAt DateTime @updatedAt
  quantity   Int      @default(1)

  // 0: cancelled
  // 1: in cart
  // 2: placed
  // 3: Payment Info Confirmed
  // 4: Processing order
  // 5: Out for delivery
  // 6: order received
  // 7: order completed
  status Int @default(2)

  // dates
  cancelledAt        DateTime?
  placedAt           DateTime?
  paymentConfirmedAt DateTime?
  processingAt       DateTime?
  outForDeliveryAt   DateTime?
  receivedAt         DateTime?
  completedAt        DateTime?

  // box
  box   Box    @relation(fields: [boxId], references: [id])
  boxId String

  // user
  user   User   @relation(fields: [userId], references: [id])
  userId String

  @@index([boxId, userId])
}

model Transaction {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  modifiedAt DateTime @updatedAt

  // 1: cash
  // 2: gcash
  // 3: bank
  modeOfPayment Int

  // 1: full payment
  // 2: partial payment
  // 3: down payment
  type Int

  // 1: box
  // 2: vehicle
  // 3: apartment
  itemType Int

  amount Float

  from       User?   @relation(fields: [fromUserId], references: [id])
  fromUserId String?

  tenant       Tenant?   @relation(fields: [fromTenantId], references: [id])
  fromTenantId Int?
  Booking      Booking[]

  @@index([fromUserId])
}

model Vehicle {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  modifiedAt DateTime @updatedAt

  name              String    @unique
  model             String
  purchaseDate      DateTime
  lastMaintenance   DateTime?
  photoUrl          String
  plateNumber       String
  serviceFeePerHour Float

  // 1: Available
  // 2: Booked
  // 3: Rented
  // 4: On the road
  // 5: Under maintenance
  status  Int       @default(1)
  Booking Booking[]
}

model Booking {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  modifiedAt DateTime @updatedAt
  paidAmount Float    @default(0)

  // 0: cancelled
  // 1: pending
  // 2: confirmed
  // 3: on the road
  // 4: completed
  // 5: declined
  status Int @default(1)

  travelType Int @default(1)
  // 1: one way
  // 2: round trip
  // 3: hourly

  // dates
  pickupDate DateTime
  returnDate DateTime?

  // location
  pickUpLocation String
  destination    String?

  // vehicle
  vehicle   Vehicle @relation(fields: [vehicleId], references: [id])
  vehicleId String

  // booker
  booker   User   @relation(fields: [bookerId], references: [id])
  bookerId String

  // transaction
  transaction   Transaction @relation(fields: [transactionId], references: [id])
  transactionId String

  @@index([vehicleId, bookerId, transactionId])
}

model AuditLog {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  remark String?

  // 1: user
  // 2: box
  // 3: boxOrder
  // 4: transaction
  // 5: audit
  // 6: Vehicle
  // 7: Booking
  affectedTable Int

  // 1: create
  // 2: update
  // 3: delete
  action Int

  actor   User   @relation(fields: [actorId], references: [id])
  actorId String

  // the id of the document that was either created, updated, or deleted
  // either a box, user, boxOrder, or transaction
  affectedRowId String

  columnName String?
  from       String?
  to         String?

  @@index([actorId, affectedRowId])
}

model Apartment {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  modifiedAt DateTime @updatedAt

  address                    String
  monthlyRentalPrice         Float
  maxOccupantsPerUnit        Int
  images                     String[]
  withMotorcycleParkingSpace Boolean
  withCarParkingSpace        Boolean
  bedrooms                   Int
  toiletAndBath              Int

  availability_status Int @default(0)
  // 0: Available
  // 1: Occupied

  // square meters
  area Float

  tenant   Tenant? @relation(fields: [tenantId], references: [id])
  tenantId Int?

  ApartmentInquiry ApartmentInquiry[]
}

model ApartmentInquiry {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  modifiedAt DateTime @updatedAt

  firstName               String
  lastName                String
  email                   String
  contactNumber           String
  preferredVisitationDate DateTime
  status                  Int      @default(0)
  // 0 Pending
  // 1 Responded
  // 2 Closed
  remarks                 String?

  apartment   Apartment @relation(fields: [apartmentId], references: [id])
  apartmentId String
}

model Tenant {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  modifiedAt DateTime @updatedAt

  firstName        String
  lastName         String
  contactNumber    String
  moveInDate       DateTime
  monthlyDueDate   Int
  monthlyPayment   Float
  emailAddress     String
  tenantSignature  String?
  ownerSignature   String?
  ownerName        String?
  ownerContact     String?
  witnesses        String[]
  contractSigned   DateTime?
  agreementCreated DateTime?

  status      Int           @default(0)
  // 0 Active
  // 1 Inactive
  // 2 Archived
  // 3 Due
  Transaction Transaction[]
  Apartment   Apartment[]
}

model BoxInventory {
  id             String  @id @default(cuid())
  length         Int
  width          Int
  height         Int
  thickness      Int     @default(0)
  // 0 single
  // 1 double
  color          Int     @default(0)
  // 0 white
  // 1 yellow
  quantity       Int
  weightPerPiece Int
  TotalWeight    Int
  // Weight in lbs
  cardboardType  Int     @default(0)
  // 0 Brand New
  // 1 Second Hand
  type           BoxType @relation(fields: [boxType], references: [id])
  boxType        Int
}

model BoxType {
  id           Int            @id @default(autoincrement())
  typeName     String
  BoxInventory BoxInventory[]
}
